const AppointmentManagement = () => {
    const [appointments, setAppointments] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filterStatus, setFilterStatus] = useState('all');

    useEffect(() => {
        const fetchAppointments = async () => {
            try {
                // Mock data since there's no admin endpoint for all appointments
                setAppointments([
                    {
                        id: 1,
                        patientName: "Nguy·ªÖn VƒÉn A",
                        doctorName: "BS. Tr·∫ßn Th·ªã B",
                        date: "2024-01-15",
                        time: "09:00",
                        status: "PENDING",
                        appointmentType: "VIDEO_CALL"
                    },
                    {
                        id: 2,
                        patientName: "L√™ Th·ªã C",
                        doctorName: "BS. Ph·∫°m VƒÉn D",
                        date: "2024-01-15",
                        time: "10:30",
                        status: "CONFIRMED",
                        appointmentType: "IN_PERSON"
                    },
                    {
                        id: 3,
                        patientName: "Ho√†ng Minh E",
                        doctorName: "BS. Nguy·ªÖn Th·ªã F",
                        date: "2024-01-14",
                        time: "14:00",
                        status: "COMPLETED",
                        appointmentType: "VIDEO_CALL"
                    },
                    {
                        id: 4,
                        patientName: "Tr·∫ßn VƒÉn G",
                        doctorName: "BS. L√™ Th·ªã H",
                        date: "2024-01-12",
                        time: "11:15",
                        status: "CANCELLED",
                        appointmentType: "IN_PERSON"
                    }
                ]);
            } catch (error) {
                console.error('Error fetching appointments:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchAppointments();
    }, []);

    const getStatusColor = (status) => {
        const colors = {
            'PENDING': 'bg-yellow-100 text-yellow-800',
            'CONFIRMED': 'bg-blue-100 text-blue-800',
            'COMPLETED': 'bg-green-100 text-green-800',
            'CANCELLED': 'bg-red-100 text-red-800'
        };
        return colors[status] || 'bg-gray-100 text-gray-800';
    };

    const getStatusText = (status) => {
        const texts = {
            'PENDING': 'Ch·ªù x√°c nh·∫≠n',
            'CONFIRMED': 'ƒê√£ x√°c nh·∫≠n',
            'COMPLETED': 'Ho√†n th√†nh',
            'CANCELLED': 'ƒê√£ h·ªßy'
        };
        return texts[status] || status;
    };

    const filteredAppointments = appointments.filter(appointment =>
        filterStatus === 'all' || appointment.status === filterStatus
    );

    const exportAppointments = (format) => {
        const data = filteredAppointments.map(appointment => ({
            'ID': appointment.id,
            'B·ªánh nh√¢n': appointment.patientName,
            'B√°c sƒ©': appointment.doctorName,
            'Ng√†y': formatDate(appointment.date),
            'Gi·ªù': appointment.time,
            'Lo·∫°i h√¨nh': appointment.appointmentType === 'VIDEO_CALL' ? 'Video call' : 'T·∫°i ph√≤ng kh√°m',
            'Tr·∫°ng th√°i': getStatusText(appointment.status)
        }));

        if (format === 'pdf') {
            exportUtils.exportToPDF('B√°o c√°o cu·ªôc h·∫πn',
                data.map(item => Object.entries(item).map(([k,v]) => `${k}: ${v}`).join(', '))
            );
        } else {
            exportUtils.exportToExcel('B√°o c√°o cu·ªôc h·∫πn', data);
        }
    };

    if (loading) return <LoadingSpinner />;

    return (
        <div className="space-y-6 fade-in">
            <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold">Qu·∫£n l√Ω cu·ªôc h·∫πn</h2>
                <div className="flex items-center space-x-4">
                    <select
                        value={filterStatus}
                        onChange={(e) => setFilterStatus(e.target.value)}
                        className="border rounded-lg px-3 py-2"
                    >
                        <option value="all">T·∫•t c·∫£</option>
                        <option value="PENDING">Ch·ªù x√°c nh·∫≠n</option>
                        <option value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</option>
                        <option value="COMPLETED">Ho√†n th√†nh</option>
                        <option value="CANCELLED">ƒê√£ h·ªßy</option>
                    </select>
                    <div className="space-x-2">
                        <button
                            onClick={() => exportAppointments('pdf')}
                            className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                        >
                            üìÑ PDF
                        </button>
                        <button
                            onClick={() => exportAppointments('excel')}
                            className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
                        >
                            üìä Excel
                        </button>
                    </div>
                </div>
            </div>

            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead className="bg-gray-50">
                        <tr>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">B·ªánh nh√¢n</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">B√°c sƒ©</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Ng√†y gi·ªù</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Lo·∫°i h√¨nh</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tr·∫°ng th√°i</th>
                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Thao t√°c</th>
                        </tr>
                        </thead>
                        <tbody className="divide-y divide-gray-200">
                        {filteredAppointments.map((appointment) => (
                            <tr key={appointment.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 font-medium">{appointment.patientName}</td>
                                <td className="px-6 py-4">{appointment.doctorName}</td>
                                <td className="px-6 py-4">
                                    <div>
                                        <p>{formatDate(appointment.date)}</p>
                                        <p className="text-sm text-gray-500">{appointment.time}</p>
                                    </div>
                                </td>
                                <td className="px-6 py-4">
                                        <span className={`px-2 py-1 text-xs rounded-full ${
                                            appointment.appointmentType === 'VIDEO_CALL'
                                                ? 'bg-purple-100 text-purple-800'
                                                : 'bg-green-100 text-green-800'
                                        }`}>
                                            {appointment.appointmentType === 'VIDEO_CALL' ? 'Video call' : 'T·∫°i ph√≤ng kh√°m'}
                                        </span>
                                </td>
                                <td className="px-6 py-4">
                                        <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(appointment.status)}`}>
                                            {getStatusText(appointment.status)}
                                        </span>
                                </td>
                                <td className="px-6 py-4 text-sm space-x-2">
                                    <button className="text-blue-600 hover:text-blue-900">Xem</button>
                                    {appointment.status !== 'CANCELLED' && appointment.status !== 'COMPLETED' && (
                                        <button className="text-red-600 hover:text-red-900">H·ªßy</button>
                                    )}
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};
